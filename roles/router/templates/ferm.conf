# Managed by Ansible
{%- set nat_ifaces = (subnets | json_query("[?allow_internet].iface")) %}
{%- set nat_cidrs = (subnets | json_query("[?allow_internet].cidr")) %}
{%- set dhcp_ifaces = (subnets | json_query("[?dhcp == `true`].iface")) %}

table filter {
	chain INPUT {
		policy DROP;

		# connection tracking
		mod state state INVALID DROP;
		mod state state (ESTABLISHED RELATED) ACCEPT;

		# allow local packet
		interface lo ACCEPT;

		# respond to ping
		proto icmp ACCEPT;
		# SSH from everywhere
		proto tcp dport ssh ACCEPT;

		# DNS on all subnets
		interface ({{ subnets | json_query("[].iface") | join(" ") }}) proto (tcp udp) dport domain ACCEPT;
		# DHCP on some subnets
		{% if dhcp_ifaces %}interface ({{ dhcp_ifaces | join(" ") }}) proto udp dport bootps ACCEPT;{% endif %}
	}

	chain OUTPUT {
		policy ACCEPT;

		# connection tracking
		mod state state INVALID DROP;
		mod state state (ESTABLISHED RELATED) ACCEPT;
	}

	chain FORWARD {
		policy DROP;

		# connection tracking
		mod state state INVALID DROP;
		mod state state (ESTABLISHED RELATED) ACCEPT;

		# Allow internet on some interfaces
		{% if nat_ifaces %}interface ({{ nat_ifaces | join(" ") }}) outerface {{ wan_iface }} ACCEPT;{% endif %}
	}
}

table nat {
	chain POSTROUTING {
		# Masquerade internet access - NAT
		{% if nat_cidrs %}saddr ({{ nat_cidrs | join(" ") }}) outerface {{ wan_iface }} MASQUERADE;{% endif %}
	}
}
